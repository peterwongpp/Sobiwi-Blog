<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Sobiwi Blog]]></title>
  <link href="http://sobiwi.peterwongpp.com/atom.xml" rel="self"/>
  <link href="http://sobiwi.peterwongpp.com/"/>
  <updated>2012-01-26T05:10:45+08:00</updated>
  <id>http://sobiwi.peterwongpp.com/</id>
  <author>
    <name><![CDATA[Sobiwi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Newly Updates]]></title>
    <link href="http://sobiwi.peterwongpp.com/blog/newly-updates/"/>
    <updated>2012-01-24T00:00:00+08:00</updated>
    <id>http://sobiwi.peterwongpp.com/blog/newly-updates</id>
    <content type="html"><![CDATA[<p>After the interim presentation, I have been working on the wiki module which is for handling user contributed knowledges (has no any solid relation to the Wikipedia).</p>

<p>By the way, I am happy that the schedule was quite well and I actually have done 50% of the project! It is encouraging!</p>

<p>Back to the wiki module. What I have done in these two weeks are mainly on the timeline. The timeline is a series of notes created by the user himself as well as his friends (users he is following), ordered by the creation time.</p>

<p>So now it can be listed on the user homepage.</p>

<p>The coming tasks are:</p>

<ol>
<li>to add more note types support. Now for simplicity we just added two types: share of verse(s) and article on verse(s).</li>
<li>to build web interface for the users to manage their notes.</li>
</ol>


<p>However, it is unexpected that there are so many spams on this site! So I am planning to move out. This would take some time, but I am pretty sure it is worth doing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup Cucumber]]></title>
    <link href="http://sobiwi.peterwongpp.com/blog/setup-cucumber/"/>
    <updated>2011-12-25T00:00:00+08:00</updated>
    <id>http://sobiwi.peterwongpp.com/blog/setup-cucumber</id>
    <content type="html"><![CDATA[<p>This post will show how to add cucumber (<a href="http://cukes.info" title="Cucumber">http://cukes.info</a>) support for acceptance testing. This is in addition to the previous post <a href="http://sobiwi.peterwongpp.com/blog/setup-the-test-environment">Setup the Test Environment</a>.</p>

<p>We are going to install cucumber, as well as adding support for spork and guard in order to load cucumber features faster.</p>

<p>Finally, don&#8217;t forget the simplecov. It supports both rspec and cucumber :)</p>

<!-- more -->


<h2>Code</h2>

<h3>1) Install cucumber</h3>

<p>add this to the Gemfile and the run <code>bundle</code>:</p>

<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">group</span> <span class="ss">:test</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;cucumber-rails&#39;</span>
</span><span class='line'>  <span class="c1"># database_cleaner is not required, but highly recommended</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;database_cleaner&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>after the bundle command finished, run the generator:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>rails generate cucumber:install
</span></code></pre></td></tr></table></div></figure>


<p>Now, you may run cucumber by running this command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>cucumber features
</span><span class='line'><span class="c"># or</span>
</span><span class='line'>rake cucumber
</span></code></pre></td></tr></table></div></figure>


<h3>2) Spork support for cucumber</h3>

<p>Still remember how did we add spork support for rspec? We ran <code>spork --bootstrap</code>. However, if we run the same command again, it should only work for rspec. For cucumber, we do the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>spork cucumber --bootstrap
</span></code></pre></td></tr></table></div></figure>


<p>To start a spork for rspec, we run <code>spork</code>. For cucumber, we need:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>spork cucumber
</span></code></pre></td></tr></table></div></figure>


<p>Now, before we actually run the spork command, let&#8217;s update the features/support/env.rb so that spork loads correctly. The instructions of how to update the env.rb have been added to the env.rb file when you run <code>spork cucumber --bootstrap</code>.</p>

<p>To use spork with cucumber, run these in two consoles:</p>

<figure class='code'><figcaption><span>console 1</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>spork cucumber
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>console 2</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>cucumber --drb features
</span></code></pre></td></tr></table></div></figure>


<h3>3) Guard cucumber</h3>

<p>add this to Gemfile and run <code>bundle</code></p>

<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">group</span> <span class="ss">:test</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;guard-cucumber&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>after that, run:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>guard init cucumber
</span></code></pre></td></tr></table></div></figure>


<p>The update have been added to the Guardfile. You may have a look to see if you need any customization. But for me it&#8217;s OK already :)</p>

<p>Now <code>guard</code> command will run both cucumber and rspec in the same time.</p>

<h3>4) simplecov</h3>

<p>add this single line to the top of the features/support/env.rb:</p>

<figure class='code'><figcaption><span>top of features/support/env.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;simplecov&#39;</span>
</span><span class='line'><span class="c1"># ... rest of the file</span>
</span></code></pre></td></tr></table></div></figure>


<p>To generate coverage report, same as the rspec, just directly run <code>cucumber features</code> instead of running cucumber from guard.</p>

<p>Now, all are done :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[User Authentication]]></title>
    <link href="http://sobiwi.peterwongpp.com/blog/user-authentication/"/>
    <updated>2011-12-16T00:00:00+08:00</updated>
    <id>http://sobiwi.peterwongpp.com/blog/user-authentication</id>
    <content type="html"><![CDATA[<p>There are a bunch of well developed user authentication gems available for rails. One of them is <a href="http://www.omniauth.org">OmniAuth</a>.</p>

<p>Starting from version 1.x, OmniAuth separated every strategies into separated gems. OmniAuth integrated many different authentication providers, such as Facebook, Twitter, OpenId, in order to provide a standardized interface.</p>

<p>Each provider is a so-called strategy. Recently there is a omniauth-identity gem to due with the traditional username password authentication instead of using external providers.</p>

<p>In short, making use of OmniAuth, we could provide username password authentication with the omniauth-identity, while having an advantage of integrate with other external providers relatively easier.</p>

<!-- more -->


<h2>Code</h2>

<p>I am going to follow the episode <a href="http://railscasts.com/episodes/304-omniauth-identity">#304 OmniAuth Identity</a> with little modifications to suit our need.</p>

<h3>1) add the following to the Gemfile and run <code>bundle</code></h3>

<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;bcrypt-ruby&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 3.0.0&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;omniauth-identity&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>2) create a config/initializers/omniauth.rb file with the following content:</h3>

<figure class='code'><figcaption><span>config/initializers/omniauth.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">middleware</span><span class="o">.</span><span class="n">use</span> <span class="no">OmniAuth</span><span class="o">::</span><span class="no">Builder</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">provider</span> <span class="ss">:identity</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>3) create the sessions_controller for handling sign in / out for omniauth</h3>

<p>run the following command: <code>rails generate controller sessions</code></p>

<p>edit the generated app/controllers/sessions_controller.rb file as:</p>

<figure class='code'><figcaption><span>app/controllers/sessions_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">SessionsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">new</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>    <span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">from_omniauth</span><span class="p">(</span><span class="n">env</span><span class="o">[</span><span class="s2">&quot;omniauth.auth&quot;</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="n">session</span><span class="o">[</span><span class="ss">:user_id</span><span class="o">]</span> <span class="o">=</span> <span class="n">user</span><span class="o">.</span><span class="n">id</span>
</span><span class='line'>    <span class="n">redirect_to</span> <span class="n">root_url</span><span class="p">,</span> <span class="n">notice</span><span class="p">:</span> <span class="s2">&quot;Signed in!&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">destroy</span>
</span><span class='line'>    <span class="n">session</span><span class="o">[</span><span class="ss">:user_id</span><span class="o">]</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'>    <span class="n">redirect_to</span> <span class="n">root_url</span><span class="p">,</span> <span class="n">notice</span><span class="p">:</span> <span class="s2">&quot;Signed out!&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">failure</span>
</span><span class='line'>    <span class="n">redirect_to</span> <span class="n">root_url</span><span class="p">,</span> <span class="n">alert</span><span class="p">:</span> <span class="s2">&quot;Authentication failed, please try again.&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now you could see there are something we do not have right now: User model and root_url</p>

<h3>4) create the User model</h3>

<p>by using the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>rails generate model user provider:string uid:string display_name:string <span class="c"># any other fields you might want</span>
</span></code></pre></td></tr></table></div></figure>


<p>followed by <code>rake db:migrate</code></p>

<p>and then update the generated app/models/user.rb as:</p>

<figure class='code'><figcaption><span>app/models/user.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">from_omniauth</span><span class="p">(</span><span class="n">auth</span><span class="p">)</span>
</span><span class='line'>    <span class="n">find_by_provider_and_uid</span><span class="p">(</span><span class="n">auth</span><span class="o">[</span><span class="s2">&quot;provider&quot;</span><span class="o">]</span><span class="p">,</span> <span class="n">auth</span><span class="o">[</span><span class="s2">&quot;uid&quot;</span><span class="o">]</span><span class="p">)</span> <span class="o">||</span> <span class="n">create_with_omniauth</span><span class="p">(</span><span class="n">auth</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">create_with_omniauth</span><span class="p">(</span><span class="n">auth</span><span class="p">)</span>
</span><span class='line'>    <span class="n">create!</span> <span class="k">do</span> <span class="o">|</span><span class="n">user</span><span class="o">|</span>
</span><span class='line'>      <span class="n">user</span><span class="o">.</span><span class="n">provider</span> <span class="o">=</span> <span class="n">auth</span><span class="o">[</span><span class="s2">&quot;provider&quot;</span><span class="o">]</span>
</span><span class='line'>      <span class="n">user</span><span class="o">.</span><span class="n">uid</span> <span class="o">=</span> <span class="n">auth</span><span class="o">[</span><span class="s2">&quot;uid&quot;</span><span class="o">]</span>
</span><span class='line'>      <span class="n">user</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">auth</span><span class="o">[</span><span class="s2">&quot;info&quot;</span><span class="o">][</span><span class="s2">&quot;name&quot;</span><span class="o">]</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now the User model part is ready. It&#8217;s time to the identity part. In omniauth-identity, there is another model for handling the authentication instead of the user model (of course you may map the model in the config&#8230;).</p>

<h3>5) create the Identity model</h3>

<p>by using the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>rails generate model identity name:string email:string password_digest:string
</span></code></pre></td></tr></table></div></figure>


<p>followed by <code>rake db:migrate</code></p>

<p>Now you need to update the generated app/models/identity.rb as:</p>

<figure class='code'><figcaption><span>app/models/identity.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Identity</span> <span class="o">&lt;</span> <span class="no">OmniAuth</span><span class="o">::</span><span class="no">Identity</span><span class="o">::</span><span class="no">Models</span><span class="o">::</span><span class="no">ActiveRecord</span>
</span><span class='line'>  <span class="c1"># anything else you want</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>6) add the following two paths to suitable position in your view file:</h3>

<p>6.1) create identity path: /auth/identity/register<br/>
6.2) login path: /auth/identity</p>

<p>The above 2 links are linked to the default registration and login pages. However, these 2 default pages does not match our design as well as there are no error handling. So we need to provide validations to Identity model and also provide the registration and login pages.</p>

<h3>7) insert validation rules to the identity model</h3>

<figure class='code'><figcaption><span>app/models/identity.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">validates</span> <span class="ss">:name</span><span class="p">,</span> <span class="n">presence</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'><span class="n">validates</span> <span class="ss">:email</span><span class="p">,</span> <span class="n">uniqueness</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="nb">format</span><span class="p">:</span><span class="sr"> /^[^@\s]+\@([-a-z0-9]+\.)+[a-z0-9]{2</span>
</span></code></pre></td></tr></table></div></figure>


<p>We do not need to add <code>presence: true</code> to the email validation as the format do not allow blank input.</p>

<h3>8 ) points for the login form</h3>

<p>I am not going to paste my full code in both the login form as well as the registration form as it would be too long.</p>

<p>Instead, I write down the things we need to notice here.</p>

<p>8.1) you should be using form_tag and must post to /auth/identity/callback<br/>
8.2) these two fields should present: auth_key (for email) and password<br/>
8.3) the above 2 keys should be in top level in params.</p>

<p>For example <code>&lt;%= text_field_tag :auth_key %&gt;</code><br/>
Instead of <code>&lt;%= text_field_tag :login[auth_key] %&gt;</code></p>

<p>If you actually using form_for, You could do: <code>&lt;%= f.text_field :auth_key, name: "auth_key" %&gt;</code></p>

<p>8.4) I would recommend to put the form inside the sessions#new view. This view file in the future will also provide other external providers&#8217; login.</p>

<p>That&#8217;s all for login form :)</p>

<h3>9) points for the registration form</h3>

<p>9.1) you should create a identities_controller and using at least the new action. (no need to use create action as the registration form is actually passed to omniauth for the standardized approach).<br/>
9.2) put the needed route into the routes.rb file. eg. <code>resources :identities, only: [:new]</code><br/>
9.3) you should again be using form_tag and must post to /auth/identity/register<br/>
9.4) by default, only the following fields will be handled: <code>name</code>, <code>email</code>, <code>password</code>, <code>password_confirmation</code>.<br/>
<code>password</code> and <code>password_confirmation</code> must be handle, while <code>name</code> and <code>email</code> could be set in the configuration. To change <code>name</code>, <code>email</code> or to add more other fields, you should update the following line in the config/initializers/omniauth.rb as the next code block.<br/>
9.5) you need also to make omniauth-identity to redirect back to the identities#new, see the next code block too.</p>

<figure class='code'><figcaption><span>config/initializers/omniauth.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">provider</span> <span class="ss">:identity</span><span class="p">,</span> <span class="ss">:fields</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="ss">:name</span><span class="p">,</span> <span class="ss">:email</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>  <span class="n">on_failed_registration</span><span class="p">:</span> <span class="nb">lambda</span> <span class="p">{</span> <span class="o">|</span><span class="n">env</span><span class="o">|</span>
</span><span class='line'>  <span class="no">IdentitiesController</span><span class="o">.</span><span class="n">action</span><span class="p">(</span><span class="ss">:new</span><span class="p">)</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>9.6) define the identities#new action as follow:</p>

<figure class='code'><figcaption><span>app/controllers/identities_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">new</span>
</span><span class='line'>  <span class="vi">@identity</span> <span class="o">=</span> <span class="n">env</span><span class="o">[</span><span class="s1">&#39;omniauth.identity&#39;</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>10) add the required routes</h3>

<figure class='code'><figcaption><span>config/routes.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">get</span> <span class="s1">&#39;/login&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;sessions#new&#39;</span><span class="p">,</span> <span class="n">as</span><span class="p">:</span> <span class="ss">:login</span>
</span><span class='line'><span class="n">match</span> <span class="s1">&#39;/auth/:provider/callback&#39;</span><span class="p">,</span> <span class="n">to</span><span class="p">:</span> <span class="s1">&#39;sessions#create&#39;</span>
</span><span class='line'><span class="n">match</span> <span class="s1">&#39;/auth/failure&#39;</span><span class="p">,</span> <span class="n">to</span><span class="p">:</span> <span class="s1">&#39;sessions#failure&#39;</span>
</span><span class='line'><span class="n">match</span> <span class="s1">&#39;/logout&#39;</span><span class="p">,</span> <span class="n">to</span><span class="p">:</span> <span class="s1">&#39;sessions#destroy&#39;</span><span class="p">,</span> <span class="ss">:as</span> <span class="o">=&gt;</span> <span class="ss">:logout</span>
</span><span class='line'>
</span><span class='line'><span class="n">resources</span> <span class="ss">:identities</span><span class="p">,</span> <span class="n">only</span><span class="p">:</span> <span class="o">[</span><span class="ss">:new</span><span class="o">]</span> <span class="c1"># as well as the route for the registration form</span>
</span></code></pre></td></tr></table></div></figure>


<p>All things should be done :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup the Test Environment]]></title>
    <link href="http://sobiwi.peterwongpp.com/blog/setup-the-test-environment/"/>
    <updated>2011-12-12T00:00:00+08:00</updated>
    <id>http://sobiwi.peterwongpp.com/blog/setup-the-test-environment</id>
    <content type="html"><![CDATA[<p>There are some gems for specific parts of testing.</p>

<p><a href="http://github.com/thoughtbot/factory_girl" title="FactoryGirl">factory_girl</a> - for generating fixtures</p>

<p><a href="http://www.relishapp.com/rspec" title="RSpec 2">rspec2</a> - for doing unit test, integration test, etc</p>

<p><a href="http://github.com/jnicklas/capybara" title="Capybara">capabara</a> - for mimicking user&#8217;s behaviour in order to do user acceptance test and improviding the integration test</p>

<p><a href="http://github.com/sporkrb/spork" title="Spork">spork</a> - to fork a test environment before each run of the tests, for firing test cases much faster than the traditional way which loads the entire rails test environment before you could run the test cases</p>

<p><a href="http://github.com/guard/guard" title="Guard">guard</a> - for handling events on file modifications. It is configured that whenever a source code or a test case is updated, the corresponding test cases would be run automatically. Together with spork, test cases would be automatically run in a fast pace whenever a source code or a test case is updated so that we could get the test result in real time</p>

<p><a href="http://github.com/colszowka/simplecov" title="SimpleCov">simplecov</a> - for code coverage report generation</p>

<!-- more -->


<h2>Code</h2>

<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>group :test, :development do
</span><span class='line'>  gem &#39;rspec-rails&#39;, &#39;~&gt; 2.6&#39;
</span><span class='line'>  gem &#39;factory_girl_rails&#39;
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>group :test do
</span><span class='line'>  gem &#39;spork&#39;, &#39;~&gt; 0.9.0.rc&#39;
</span><span class='line'>
</span><span class='line'>  gem &#39;guard-rspec&#39;
</span><span class='line'>  gem &#39;guard-spork&#39;
</span><span class='line'>
</span><span class='line'>  gem &#39;capybara&#39;
</span><span class='line'>
</span><span class='line'>  gem &#39;simplecov&#39;, :require =&gt; false
</span><span class='line'>end
</span></code></pre></td></tr></table></div></figure>


<p>then run <code>bundle</code></p>

<p>init rspec:</p>

<figure class='code'><figcaption><span>console</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>rails generate rspec:install
</span><span class='line'>&gt; create  .rspec
</span><span class='line'>&gt; create  spec
</span><span class='line'>&gt; create  spec/spec_helper.rb
</span></code></pre></td></tr></table></div></figure>


<p>setup spork:</p>

<figure class='code'><figcaption><span>console</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>spork --bootstrap
</span></code></pre></td></tr></table></div></figure>


<p>after that, some instructions are inserted into spec/spec_helper.rb automatically. Update the spec/spec_helper.rb file according to the instructions.</p>

<p>now, is time to guard rspec.</p>

<figure class='code'><figcaption><span>console</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>guard init rspec
</span><span class='line'>&gt; Writing new Guardfile to /Users/PeterWong/Projects/sobiwi/Guardfile
</span><span class='line'>&gt; rspec guard added to Guardfile, feel free to edit it
</span></code></pre></td></tr></table></div></figure>


<p>then is to guard spork:</p>

<figure class='code'><figcaption><span>console</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>guard init spork
</span><span class='line'>&gt; spork guard added to Guardfile, feel free to edit it
</span></code></pre></td></tr></table></div></figure>


<p>now we need to update the Guardfile to move the newly appended <code>guard 'spork'</code> block to the top of the <code>guard 'rspec'</code> block.</p>

<p>Also we need to do the following:</p>

<figure class='code'><figcaption><span>Guardfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># change the following line</span>
</span><span class='line'><span class="n">guard</span> <span class="s1">&#39;rspec&#39;</span><span class="p">,</span> <span class="ss">:version</span> <span class="o">=&gt;</span> <span class="mi">2</span> <span class="k">do</span>
</span><span class='line'><span class="c1"># to</span>
</span><span class='line'><span class="n">guard</span> <span class="s1">&#39;rspec&#39;</span><span class="p">,</span> <span class="ss">:version</span> <span class="o">=&gt;</span> <span class="mi">2</span><span class="p">,</span> <span class="ss">:cli</span> <span class="o">=&gt;</span> <span class="s1">&#39;--drb&#39;</span> <span class="k">do</span>
</span></code></pre></td></tr></table></div></figure>


<p>now guard is working and to run test cases in real time, run the command <code>guard</code>.</p>

<p>to setup capybara, update:</p>

<figure class='code'><figcaption><span>rails spec/spec_helper.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">ENV</span><span class="o">[</span><span class="s2">&quot;RAILS_ENV&quot;</span><span class="o">]</span> <span class="o">||=</span> <span class="s1">&#39;test&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s2">&quot;../../config/environment&quot;</span><span class="p">,</span> <span class="bp">__FILE__</span><span class="p">)</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;rspec/rails&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;rspec/autorun&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;capybara/rspec&#39;</span> <span class="c1"># add this new line</span>
</span></code></pre></td></tr></table></div></figure>


<p>finally to automatically reload factory_girl fixtures, add the following line inside the <code>Spork.each_run</code> block in the spec/spec_helper.rb:</p>

<figure class='code'><figcaption><span>spec/spec_helper.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">FactoryGirl</span><span class="o">.</span><span class="n">reload</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now things are all done. We could do TDD too :)</p>

<p>Oh, forgot to setup the simeplecov. To set it up, insert the following line in the very beginning of the spec/spec_helper.rb file:</p>

<figure class='code'><figcaption><span>spec/spec_helper.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;simplecov&#39;</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span> <span class="c1"># rest of the original file content</span>
</span></code></pre></td></tr></table></div></figure>


<p>and then create a .simplecov file in the root of the project having the following content:</p>

<figure class='code'><figcaption><span>.simplecov</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">SimpleCov</span><span class="o">.</span><span class="n">start</span> <span class="s1">&#39;rails&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">add_filter</span> <span class="s1">&#39;spec&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">add_group</span> <span class="s1">&#39;Mailers&#39;</span><span class="p">,</span> <span class="s1">&#39;app/mailers&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>It is to tell simplecov to ignore the code coverage of the spec directory (we do not test out test cases) and add a group named Mailers for the mailers in case we have mailers in use.</p>

<p><code>SimpleCov.start 'rails'</code> will automatically group controllers, helpers, models, lib and plugins code and so those groups do not need to be added by ourself.</p>

<p>One more note, to obtain the coverage report, guard cannot be used. Instead we should run rspec directly:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rspec</span> <span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>to run all the spec to obtain the full coverage report (as the hits per line etc need to be calculated, we must ensure every test case is run once).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Server Setup for both production and development environments]]></title>
    <link href="http://sobiwi.peterwongpp.com/blog/server-setup-for-both-production-and-development-environments/"/>
    <updated>2011-12-11T00:00:00+08:00</updated>
    <id>http://sobiwi.peterwongpp.com/blog/server-setup-for-both-production-and-development-environments</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>As decided, we are going to use <a href="http://rubyonrails.org">Ruby on Rails</a>, a MVC web framework written in Ruby language.</p>

<p>The main development environment will be a Mac OS X version 10.7, while the main production environment will be on <a href="http://heroku.com">Heroku</a>, a cloud application platform.</p>

<p>On both the environments, we are going to use <a href="http://code.macournoyer.com/thin">Thin</a> as the web server, and use the MySQL database with mysql2 gem as an adapter for rails.</p>

<p>It should be noted that the MySQL database on the production environment is a fault tolerant database-as-a-service in the cloud. The service is named <a href="http://cleardb.com">ClearDB</a>. There is an add-on on heroku and a free service is choosable although it is in a lower power: 5MB storage, 10 Connections, Low I/O Performance and Daily Backups.</p>

<p>As in the current state, we are on developing or testing state, 1 dyno in heroku with the free add-on of ClearDB should be enough.</p>

<p>Now, back to the code.</p>

<!-- more -->


<h2>Code</h2>

<p>First, add the following to the Gemfile and then run <code>bundle install</code>:</p>

<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Original gems for a rails 3 app:</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;rails&#39;</span><span class="p">,</span> <span class="s1">&#39;3.1.3&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">group</span> <span class="ss">:assets</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;sass-rails&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 3.1.5&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;coffee-rails&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 3.1.1&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;uglifier&#39;</span><span class="p">,</span> <span class="s1">&#39;&gt;= 1.0.3&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;jquery-rails&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Newly added gems:</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;thin&#39;</span> <span class="c1"># http://code.macournoyer.com/thin</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;mysql2&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;foreman&#39;</span> <span class="c1"># https://github.com/ddollar/foreman</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, create a Procfile in the root of the application:</p>

<figure class='code'><figcaption><span>Procfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>web:  bundle exec rails server thin -p $PORT
</span></code></pre></td></tr></table></div></figure>


<p>Finally to start up the web process, run the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>foreman start
</span></code></pre></td></tr></table></div></figure>


<h2>Explanations</h2>

<p>As we discussed above, the thin is the web server and the mysql2 is the database adapter for rails.</p>

<p>We are going to use rails 3.1. The minor version might be updated for more functionality support or security issues. Rails 3.1 comes with Asset Pipeline which makes CSS and Javascript a first-class citizen in Rails. Those gems in the asset group are for the asset pipeline. And the jquery-rails gem is to use jQuery as the default Javascript library to be used in the project.</p>

<p>Finally, the foreman is a gem for managing Procfile-based applications. It automatically starts up the processes written in a Procfile in a certain format. Heroku supports Procfile and thus it is convenient to manage the processes required by the application with the help of Procfile.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Changing Direction]]></title>
    <link href="http://sobiwi.peterwongpp.com/blog/changing-direction/"/>
    <updated>2011-12-03T00:00:00+08:00</updated>
    <id>http://sobiwi.peterwongpp.com/blog/changing-direction</id>
    <content type="html"><![CDATA[<p>These few weeks doing less actual coding work. Instead, much more on thinking.</p>

<p>After the recent meeting with Dr. Lau, the supervisor, new directions are coming up.</p>

<p>Bible wiki, is the original main idea of the project. However, social, bible and wiki are just all tools. Why do we need such a bible wiki? Is the bible wiki useful?</p>

<p>For example, I was doubting if notes could be added to the verses only, or to verses, chapters, books, testaments, or even different versions of bibles. The current implementation is the later one, which is able to add things to every thing in a bible! However, is that really useful? Now I am planning to change. Instead of having 30k records of verses, belonging to different chapters, belongings to different books, then testaments and finally one bible, using a compound key of [bible, book name, chapter, verser] should be better! It may be kind of denormalization, but this make the queries a lot simpler.</p>

<p>It&#8217;s better to do more research than writing notes here :) See you later</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Recent Updates Again]]></title>
    <link href="http://sobiwi.peterwongpp.com/blog/recent-updates-again/"/>
    <updated>2011-10-25T00:00:00+08:00</updated>
    <id>http://sobiwi.peterwongpp.com/blog/recent-updates-again</id>
    <content type="html"><![CDATA[<p>Reading week and mid-term examinations are really time killer :) Finally we are back to the development now.</p>

<p>Before the recent updates, I would like to thank Roy Huesman for his comment on the FYP homepage. It reminds me that there are really someone viewing the site! I admit that the theme I created before is actually functionally-incomplete. Instead of completing the functionalities and beautify the layout, I decided to use an open source theme.</p>

<p>Now the recent updates of the application.</p>

<p>Apart from the layout updates, we have implemented the test environment. Some test have been set up and passed. More test cases will be written when the features are being implemented later.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Recent Updates]]></title>
    <link href="http://sobiwi.peterwongpp.com/blog/recent-updates/"/>
    <updated>2011-10-09T00:00:00+08:00</updated>
    <id>http://sobiwi.peterwongpp.com/blog/recent-updates</id>
    <content type="html"><![CDATA[<p>These days were busying on the actual coding work of the application.</p>

<p>The application has been pushed to Heroku and is running with PostreSQL database in production server (SQLite in development and test environments).</p>

<p>In the last news, we mentioned that the bibles were imported already. Actually after that we have done some minor updates on the process, so that the meta data together with each bible are more useful and the import speed is a lot faster.</p>

<p>In the recent updates, we have implemented a basic front end showing the bible contents. So it is now a viewable, clean and clear online bible with multi-lingual supports! (We are going to provide English and Traditional Chinese versions only, although adding more locales are as easy as simply translating a static file)</p>

<p>A basic membership system is built also. Any visitor can register as a member, with only a username and a password. After he is signed in, we will record down his locale and the bible version he is reading so that when he sign in next time, we could show the most suitable content to him.</p>

<p>Now, we are writing automated tests on the parts we have done currently and will refactor the code if needed. By this way, we have tests to confirm that we do not break the current functionalities in the development, and we have clean code to work on.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bibles Imported!]]></title>
    <link href="http://sobiwi.peterwongpp.com/blog/bibles-imported/"/>
    <updated>2011-10-03T00:00:00+08:00</updated>
    <id>http://sobiwi.peterwongpp.com/blog/bibles-imported</id>
    <content type="html"><![CDATA[<p>Yesterday night, we have finally uploaded the whole bible content into our application, including a Traditional Chinese version (和合本) and an English version (KJV), which used us about 2211460 seconds (about 36 ~ 37 minutes) for converting the downloaded format into a self-defined format and importing the bible in self-defined format into our database using ActiveRecord.</p>

<p>We parse the self-defined format line by line. Each line represents an object (a row in the database). We create the object line by line and that&#8217;s why the slowness of the import.</p>

<p>The good news is we now have a self-defined format of the representation of bible in plain text. Importing more versions of bibles would be as easy as a cake.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Database Design]]></title>
    <link href="http://sobiwi.peterwongpp.com/blog/database-design/"/>
    <updated>2011-10-01T00:00:00+08:00</updated>
    <id>http://sobiwi.peterwongpp.com/blog/database-design</id>
    <content type="html"><![CDATA[<p>This week the database structure design has been finished.</p>

<p>The tables can be separated mainly into 3 parts: bible content part, social networking part and the wiki part.</p>

<p>The bible content part is the table for storing localized contents of bibles. As we all know, there are so many versions of bibles translated into hundreds of languages. We would like to add more versions of bibles in the future easily, so the bibles are stored into the database instead of statically.</p>

<p>The social networking part stores the users data and the virtual churches. User-user and user-virtual-church relationships are the basic building blocks in this part.</p>

<p>The wiki part stores the users&#8217; contributions, such as photos they uploaded, notes they wrote. Every thing created by the user could be set to private, friend-only (including other people in the same virtual churches), and public.</p>

<p>More tables can be added in the future if needed easily as the database is designed very clean and simple.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Production Environment]]></title>
    <link href="http://sobiwi.peterwongpp.com/blog/production-environment/"/>
    <updated>2011-09-26T00:00:00+08:00</updated>
    <id>http://sobiwi.peterwongpp.com/blog/production-environment</id>
    <content type="html"><![CDATA[<p>As written in the schedule, 30th September 2011 is the due date to finalize the production for our web server.</p>

<p>We originally planned to host our web server by using the virtual machine provided by the FYP course. However, it costs HKD$700 while we were given HKD$1,000 virtual dollars (A FYP team receives HKD$1,000 per team member).</p>

<p>As a result, we decided to use a PaaS (Platform as a Service) cloud service to be our host. It is named <a href="http://heroku.com" title="Heroku">Heroku</a>, which supports Ruby on Rails, and a bunch of other programs such as Node.js and Java.</p>

<p>It provides also a number of useful add-ons such as cron jobs, emails, custom domains.</p>

<p>Another update is the database we wil use. We planned to use MySQL. However using MySQL database in Heroku is not free. So we will change to PostgreSQL, which is free and the size is enough for our development.</p>

<p>We choose Heroku because it is fast and stable. Moreover it supports Git, which we are going to use for source version controlling. The development would be simplified a lot! And most importantly, the applications hosted on Heroku scales easily. In case we have too many users for acceptance tests or in production state, we could easily scale out to have more Web Dynos (A web dyno is a single web process running the code and responding to HTTP requests), or to upgrade the database.</p>

<p>The next step we have to do is to buy a domain name for our service, and setup the project on Heroku!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2011.09.24 (Sat)]]></title>
    <link href="http://sobiwi.peterwongpp.com/blog/2011-09-24-sat/"/>
    <updated>2011-09-24T00:00:00+08:00</updated>
    <id>http://sobiwi.peterwongpp.com/blog/2011-09-24-sat</id>
    <content type="html"><![CDATA[<p>Our project website was originally written in pure PHP without any database.</p>

<p>I do not sure if it is my problem or not, but the uploading speed to the server through FTP was too slow that updating was extremely inconvenient.</p>

<p>As a result, <a href="http://wordpress.org" title="Wordpress">Wordpress</a> is used to build the project website using MySQL. A simple wordpress theme is created for the site.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2011.09.23 (Fri)]]></title>
    <link href="http://sobiwi.peterwongpp.com/blog/2011-09-23-fri/"/>
    <updated>2011-09-24T00:00:00+08:00</updated>
    <id>http://sobiwi.peterwongpp.com/blog/2011-09-23-fri</id>
    <content type="html"><![CDATA[<p>A detailed schedule including the development stages and deliverables has been updated!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2011.09.21 (Wed)]]></title>
    <link href="http://sobiwi.peterwongpp.com/blog/2011-09-21-wed/"/>
    <updated>2011-09-24T00:00:00+08:00</updated>
    <id>http://sobiwi.peterwongpp.com/blog/2011-09-21-wed</id>
    <content type="html"><![CDATA[<p>Updated the back end coding so that adding new pages would be a lot easier! (by making use of .htaccess to centralize the routing)</p>

<p>More on the project&#8217;s details will be uploaded soon.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2011.09.15 (Thu)]]></title>
    <link href="http://sobiwi.peterwongpp.com/blog/2011-09-15-thu/"/>
    <updated>2011-09-24T00:00:00+08:00</updated>
    <id>http://sobiwi.peterwongpp.com/blog/2011-09-15-thu</id>
    <content type="html"><![CDATA[<p>The first draft of the project web page uploaded :)</p>
]]></content>
  </entry>
  
</feed>
