<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: News | Sobiwi Blog]]></title>
  <link href="http://sobiwi.peterwongpp.com/blog/categories/news/atom.xml" rel="self"/>
  <link href="http://sobiwi.peterwongpp.com/"/>
  <updated>2012-01-26T04:50:36+08:00</updated>
  <id>http://sobiwi.peterwongpp.com/</id>
  <author>
    <name><![CDATA[Sobiwi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Newly Updates]]></title>
    <link href="http://sobiwi.peterwongpp.com/blog/newly-updates/"/>
    <updated>2012-01-24T00:00:00+08:00</updated>
    <id>http://sobiwi.peterwongpp.com/blog/newly-updates</id>
    <content type="html"><![CDATA[<p>After the interim presentation, I have been working on the wiki module which is for handling user contributed knowledges (has no any solid relation to the Wikipedia).</p>

<p>By the way, I am happy that the schedule was quite well and I actually have done 50% of the project! It is encouraging!</p>

<p>Back to the wiki module. What I have done in these two weeks are mainly on the timeline. The timeline is a series of notes created by the user himself as well as his friends (users he is following), ordered by the creation time.</p>

<p>So now it can be listed on the user homepage.</p>

<p>The coming tasks are:</p>

<ol>
<li>to add more note types support. Now for simplicity we just added two types: share of verse(s) and article on verse(s).</li>
<li>to build web interface for the users to manage their notes.</li>
</ol>


<p>However, it is unexpected that there are so many spams on this site! So I am planning to move out. This would take some time, but I am pretty sure it is worth doing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup Cucumber]]></title>
    <link href="http://sobiwi.peterwongpp.com/blog/setup-cucumber/"/>
    <updated>2011-12-25T00:00:00+08:00</updated>
    <id>http://sobiwi.peterwongpp.com/blog/setup-cucumber</id>
    <content type="html"><![CDATA[<p>This post will show how to add cucumber (<a href="http://cukes.info" title="Cucumber">http://cukes.info</a>) support for acceptance testing. This is in addition to the previous post <a href="/blog/setup-the-test-environment">Setup the Test Environment</a>.</p>

<p>We are going to install cucumber, as well as adding support for spork and guard in order to load cucumber features faster.</p>

<p>Finally, don't forget the simplecov. It supports both rspec and cucumber :)</p>

<!-- more -->


<h2>Code</h2>

<h3>1) Install cucumber</h3>

<p>add this to the Gemfile and the run <code>bundle</code>:</p>

<p>``` ruby Gemfile</p>

<pre><code>group :test do
  gem 'cucumber-rails'
  # database_cleaner is not required, but highly recommended
  gem 'database_cleaner'
end
</code></pre>

<p>```</p>

<p>after the bundle command finished, run the generator:</p>

<p>``` sh</p>

<pre><code>rails generate cucumber:install
</code></pre>

<p>```</p>

<p>Now, you may run cucumber by running this command:</p>

<p>``` sh</p>

<pre><code>cucumber features
# or
rake cucumber
</code></pre>

<p>```</p>

<h3>2) Spork support for cucumber</h3>

<p>Still remember how did we add spork support for rspec? We ran <code>spork --bootstrap</code>. However, if we run the same command again, it should only work for rspec. For cucumber, we do the following:</p>

<p>``` sh</p>

<pre><code>spork cucumber --bootstrap
</code></pre>

<p>```</p>

<p>To start a spork for rspec, we run <code>spork</code>. For cucumber, we need:</p>

<p>``` sh</p>

<pre><code>spork cucumber
</code></pre>

<p>```</p>

<p>Now, before we actually run the spork command, let's update the features/support/env.rb so that spork loads correctly. The instructions of how to update the env.rb have been added to the env.rb file when you run <code>spork cucumber --bootstrap</code>.</p>

<p>To use spork with cucumber, run these in two consoles:</p>

<p>``` sh console 1</p>

<pre><code>spork cucumber
</code></pre>

<p>```</p>

<p>``` sh console 2</p>

<pre><code>cucumber --drb features
</code></pre>

<p>```</p>

<h3>3) Guard cucumber</h3>

<p>add this to Gemfile and run <code>bundle</code></p>

<p>``` ruby Gemfile</p>

<pre><code>group :test do
  gem 'guard-cucumber'
end
</code></pre>

<p>```</p>

<p>after that, run:</p>

<p>``` sh</p>

<pre><code>guard init cucumber
</code></pre>

<p>```</p>

<p>The update have been added to the Guardfile. You may have a look to see if you need any customization. But for me it's OK already :)</p>

<p>Now <code>guard</code> command will run both cucumber and rspec in the same time.</p>

<h3>4) simplecov</h3>

<p>add this single line to the top of the features/support/env.rb:</p>

<p>``` ruby top of features/support/env.rb</p>

<pre><code>require 'simplecov'
# ... rest of the file
</code></pre>

<p>```</p>

<p>To generate coverage report, same as the rspec, just directly run <code>cucumber features</code> instead of running cucumber from guard.</p>

<p>Now, all are done :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[User Authentication]]></title>
    <link href="http://sobiwi.peterwongpp.com/blog/user-authentication/"/>
    <updated>2011-12-16T00:00:00+08:00</updated>
    <id>http://sobiwi.peterwongpp.com/blog/user-authentication</id>
    <content type="html"><![CDATA[<p>There are a bunch of well developed user authentication gems available for rails. One of them is <a href="http://www.omniauth.org">OmniAuth</a>.</p>

<p>Starting from version 1.x, OmniAuth separated every strategies into separated gems. OmniAuth integrated many different authentication providers, such as Facebook, Twitter, OpenId, in order to provide a standardized interface.</p>

<p>Each provider is a so-called strategy. Recently there is a omniauth-identity gem to due with the traditional username password authentication instead of using external providers.</p>

<p>In short, making use of OmniAuth, we could provide username password authentication with the omniauth-identity, while having an advantage of integrate with other external providers relatively easier.</p>

<!-- more -->


<h2>Code</h2>

<p>I am going to follow the episode <a href="http://railscasts.com/episodes/304-omniauth-identity">#304 OmniAuth Identity</a> with little modifications to suit our need.</p>

<h3>1) add the following to the Gemfile and run <code>bundle</code></h3>

<p>``` ruby Gemfile</p>

<pre><code>gem 'bcrypt-ruby', '~&gt; 3.0.0'
gem 'omniauth-identity'
</code></pre>

<p>```</p>

<h3>2) create a config/initializers/omniauth.rb file with the following content:</h3>

<p>``` ruby config/initializers/omniauth.rb</p>

<pre><code>Rails.application.config.middleware.use OmniAuth::Builder do
  provider :identity
end
</code></pre>

<p>```</p>

<h3>3) create the sessions_controller for handling sign in / out for omniauth</h3>

<p>run the following command: <code>rails generate controller sessions</code></p>

<p>edit the generated app/controllers/sessions_controller.rb file as:</p>

<p>``` ruby app/controllers/sessions_controller.rb</p>

<pre><code>class SessionsController &lt; ApplicationController
  def new
  end

  def create
    user = User.from_omniauth(env["omniauth.auth"])
    session[:user_id] = user.id
    redirect_to root_url, notice: "Signed in!";
  end

  def destroy
    session[:user_id] = nil
    redirect_to root_url, notice: "Signed out!";
  end

  def failure
    redirect_to root_url, alert: "Authentication failed, please try again.";
  end
end
</code></pre>

<p>```</p>

<p>Now you could see there are something we do not have right now: User model and root_url</p>

<h3>4) create the User model</h3>

<p>by using the following command:</p>

<p>``` sh</p>

<pre><code>rails generate model user provider:string uid:string display_name:string # any other fields you might want
</code></pre>

<p>```</p>

<p>followed by <code>rake db:migrate</code></p>

<p>and then update the generated app/models/user.rb as:</p>

<p>``` ruby app/models/user.rb</p>

<pre><code>class User &lt; ActiveRecord::Base
  def self.from_omniauth(auth)
    find_by_provider_and_uid(auth["provider"], auth["uid"]) || create_with_omniauth(auth)
  end

  def self.create_with_omniauth(auth)
    create! do |user|
      user.provider = auth["provider"]
      user.uid = auth["uid"]
      user.name = auth["info"]["name"]
    end
  end
end
</code></pre>

<p>```</p>

<p>Now the User model part is ready. It's time to the identity part. In omniauth-identity, there is another model for handling the authentication instead of the user model (of course you may map the model in the config...).</p>

<h3>5) create the Identity model</h3>

<p>by using the following command:</p>

<p>``` sh</p>

<pre><code>rails generate model identity name:string email:string password_digest:string
</code></pre>

<p>```</p>

<p>followed by <code>rake db:migrate</code></p>

<p>Now you need to update the generated app/models/identity.rb as:</p>

<p>``` ruby app/models/identity.rb</p>

<pre><code>class Identity &lt; OmniAuth::Identity::Models::ActiveRecord
  # anything else you want
end
</code></pre>

<p>```</p>

<h3>6) add the following two paths to suitable position in your view file:</h3>

<p>6.1) create identity path: /auth/identity/register<br/>
6.2) login path: /auth/identity</p>

<p>The above 2 links are linked to the default registration and login pages. However, these 2 default pages does not match our design as well as there are no error handling. So we need to provide validations to Identity model and also provide the registration and login pages.</p>

<h3>7) insert validation rules to the identity model</h3>

<p>``` ruby app/models/identity.rb</p>

<pre><code>validates :name, presence: true
validates :email, uniqueness: true, format: /^[^@\s]+\@([-a-z0-9]+\.)+[a-z0-9]{2
</code></pre>

<p>```</p>

<p>We do not need to add <code>presence: true</code> to the email validation as the format do not allow blank input.</p>

<h3>8 ) points for the login form</h3>

<p>I am not going to paste my full code in both the login form as well as the registration form as it would be too long.</p>

<p>Instead, I write down the things we need to notice here.</p>

<p>8.1) you should be using form_tag and must post to /auth/identity/callback<br/>
8.2) these two fields should present: auth_key (for email) and password<br/>
8.3) the above 2 keys should be in top level in params.</p>

<p>For example <code>&lt;%= text_field_tag :auth_key %&gt;</code><br/>
Instead of <code>&lt;%= text_field_tag :login[auth_key] %&gt;</code></p>

<p>If you actually using form_for, You could do: <code>&lt;%= f.text_field :auth_key, name: "auth_key" %&gt;</code></p>

<p>8.4) I would recommend to put the form inside the sessions#new view. This view file in the future will also provide other external providers' login.</p>

<p>That's all for login form :)</p>

<h3>9) points for the registration form</h3>

<p>9.1) you should create a identities_controller and using at least the new action. (no need to use create action as the registration form is actually passed to omniauth for the standardized approach).<br/>
9.2) put the needed route into the routes.rb file. eg. <code>resources :identities, only: [:new]</code><br/>
9.3) you should again be using form_tag and must post to /auth/identity/register<br/>
9.4) by default, only the following fields will be handled: <code>name</code>, <code>email</code>, <code>password</code>, <code>password_confirmation</code>.<br/>
<code>password</code> and <code>password_confirmation</code> must be handle, while <code>name</code> and <code>email</code> could be set in the configuration. To change <code>name</code>, <code>email</code> or to add more other fields, you should update the following line in the config/initializers/omniauth.rb as the next code block.<br/>
9.5) you need also to make omniauth-identity to redirect back to the identities#new, see the next code block too.</p>

<p>``` ruby config/initializers/omniauth.rb</p>

<pre><code>provider :identity, :fields =&gt; [:name, :email],
  on_failed_registration: lambda { |env|
  IdentitiesController.action(:new).call(env)
}
</code></pre>

<p>```</p>

<p>9.6) define the identities#new action as follow:</p>

<p>``` ruby app/controllers/identities_controller.rb</p>

<pre><code>def new
  @identity = env['omniauth.identity']
end
</code></pre>

<p>```</p>

<h3>10) add the required routes</h3>

<p>``` ruby config/routes.rb</p>

<pre><code>get '/login' =&gt; 'sessions#new', as: :login
match '/auth/:provider/callback', to: 'sessions#create'
match '/auth/failure', to: 'sessions#failure'
match '/logout', to: 'sessions#destroy', :as =&gt; :logout

resources :identities, only: [:new] # as well as the route for the registration form
</code></pre>

<p>```</p>

<p>All things should be done :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup the Test Environment]]></title>
    <link href="http://sobiwi.peterwongpp.com/blog/setup-the-test-environment/"/>
    <updated>2011-12-12T00:00:00+08:00</updated>
    <id>http://sobiwi.peterwongpp.com/blog/setup-the-test-environment</id>
    <content type="html"><![CDATA[<p>There are some gems for specific parts of testing.</p>

<p><a href="http://github.com/thoughtbot/factory_girl" title="FactoryGirl">factory_girl</a> - for generating fixtures</p>

<p><a href="http://www.relishapp.com/rspec" title="RSpec 2">rspec2</a> - for doing unit test, integration test, etc</p>

<p><a href="http://github.com/jnicklas/capybara" title="Capybara">capabara</a> - for mimicking user's behaviour in order to do user acceptance test and improviding the integration test</p>

<p><a href="http://github.com/sporkrb/spork" title="Spork">spork</a> - to fork a test environment before each run of the tests, for firing test cases much faster than the traditional way which loads the entire rails test environment before you could run the test cases</p>

<p><a href="http://github.com/guard/guard" title="Guard">guard</a> - for handling events on file modifications. It is configured that whenever a source code or a test case is updated, the corresponding test cases would be run automatically. Together with spork, test cases would be automatically run in a fast pace whenever a source code or a test case is updated so that we could get the test result in real time</p>

<p><a href="http://github.com/colszowka/simplecov" title="SimpleCov">simplecov</a> - for code coverage report generation</p>

<!-- more -->


<h2>Code</h2>

<p>``` text Gemfile</p>

<pre><code>group :test, :development do
  gem 'rspec-rails', '~&gt; 2.6'
  gem 'factory_girl_rails'
end

group :test do
  gem 'spork', '~&gt; 0.9.0.rc'

  gem 'guard-rspec'
  gem 'guard-spork'

  gem 'capybara'

  gem 'simplecov', :require =&gt; false
end
</code></pre>

<p>```</p>

<p>then run <code>bundle</code></p>

<p>init rspec:</p>

<p>``` text console</p>

<pre><code>rails generate rspec:install
&gt; create  .rspec
&gt; create  spec
&gt; create  spec/spec_helper.rb
</code></pre>

<p>```</p>

<p>setup spork:</p>

<p>``` text console</p>

<pre><code>spork --bootstrap
</code></pre>

<p>```</p>

<p>after that, some instructions are inserted into spec/spec_helper.rb automatically. Update the spec/spec_helper.rb file according to the instructions.</p>

<p>now, is time to guard rspec.</p>

<p>``` text console</p>

<pre><code>guard init rspec
&gt; Writing new Guardfile to /Users/PeterWong/Projects/sobiwi/Guardfile
&gt; rspec guard added to Guardfile, feel free to edit it
</code></pre>

<p>```</p>

<p>then is to guard spork:</p>

<p>``` text console</p>

<pre><code>guard init spork
&gt; spork guard added to Guardfile, feel free to edit it
</code></pre>

<p>```</p>

<p>now we need to update the Guardfile to move the newly appended <code>guard 'spork'</code> block to the top of the <code>guard 'rspec'</code> block.</p>

<p>Also we need to do the following:</p>

<p>``` ruby Guardfile</p>

<pre><code># change the following line
guard 'rspec', :version =&gt; 2 do
# to
guard 'rspec', :version =&gt; 2, :cli =&gt; '--drb' do
</code></pre>

<p>```</p>

<p>now guard is working and to run test cases in real time, run the command <code>guard</code>.</p>

<p>to setup capybara, update:</p>

<p>``` ruby rails spec/spec_helper.rb</p>

<pre><code>ENV["RAILS_ENV"] ||= 'test'
require File.expand_path("../../config/environment", __FILE__)
require 'rspec/rails'
require 'rspec/autorun'
require 'capybara/rspec' # add this new line
</code></pre>

<p>```</p>

<p>finally to automatically reload factory_girl fixtures, add the following line inside the <code>Spork.each_run</code> block in the spec/spec_helper.rb:</p>

<p>``` ruby spec/spec_helper.rb</p>

<pre><code>FactoryGirl.reload
</code></pre>

<p>```</p>

<p>Now things are all done. We could do TDD too :)</p>

<p>Oh, forgot to setup the simeplecov. To set it up, insert the following line in the very beginning of the spec/spec_helper.rb file:</p>

<p>``` ruby spec/spec_helper.rb</p>

<pre><code>require 'simplecov'
... # rest of the original file content
</code></pre>

<p>```</p>

<p>and then create a .simplecov file in the root of the project having the following content:</p>

<p>``` ruby .simplecov</p>

<pre><code>SimpleCov.start 'rails' do
  add_filter 'spec'

  add_group 'Mailers', 'app/mailers'
end
</code></pre>

<p>```</p>

<p>It is to tell simplecov to ignore the code coverage of the spec directory (we do not test out test cases) and add a group named Mailers for the mailers in case we have mailers in use.</p>

<p><code>SimpleCov.start 'rails'</code> will automatically group controllers, helpers, models, lib and plugins code and so those groups do not need to be added by ourself.</p>

<p>One more note, to obtain the coverage report, guard cannot be used. Instead we should run rspec directly:</p>

<p>``` ruby</p>

<pre><code>rspec .
</code></pre>

<p>```</p>

<p>to run all the spec to obtain the full coverage report (as the hits per line etc need to be calculated, we must ensure every test case is run once).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Server Setup for both production and development environments]]></title>
    <link href="http://sobiwi.peterwongpp.com/blog/server-setup-for-both-production-and-development-environments/"/>
    <updated>2011-12-11T00:00:00+08:00</updated>
    <id>http://sobiwi.peterwongpp.com/blog/server-setup-for-both-production-and-development-environments</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>As decided, we are going to use <a href="http://rubyonrails.org">Ruby on Rails</a>, a MVC web framework written in Ruby language.</p>

<p>The main development environment will be a Mac OS X version 10.7, while the main production environment will be on <a href="http://heroku.com">Heroku</a>, a cloud application platform.</p>

<p>On both the environments, we are going to use <a href="http://code.macournoyer.com/thin">Thin</a> as the web server, and use the MySQL database with mysql2 gem as an adapter for rails.</p>

<p>It should be noted that the MySQL database on the production environment is a fault tolerant database-as-a-service in the cloud. The service is named <a href="http://cleardb.com">ClearDB</a>. There is an add-on on heroku and a free service is choosable although it is in a lower power: 5MB storage, 10 Connections, Low I/O Performance and Daily Backups.</p>

<p>As in the current state, we are on developing or testing state, 1 dyno in heroku with the free add-on of ClearDB should be enough.</p>

<p>Now, back to the code.</p>

<!-- more -->


<h2>Code</h2>

<p>First, add the following to the Gemfile and then run <code>bundle install</code>:</p>

<p>``` ruby Gemfile</p>

<pre><code># Original gems for a rails 3 app:
gem 'rails', '3.1.3'

group :assets do
  gem 'sass-rails', '~&gt; 3.1.5'
  gem 'coffee-rails', '~&gt; 3.1.1'
  gem 'uglifier', '&gt;= 1.0.3'
end

gem 'jquery-rails'

# Newly added gems:
gem 'thin' # http://code.macournoyer.com/thin
gem 'mysql2'
gem 'foreman' # https://github.com/ddollar/foreman
</code></pre>

<p>```</p>

<p>Now, create a Procfile in the root of the application:</p>

<p>``` text Procfile</p>

<pre><code>web:  bundle exec rails server thin -p $PORT
</code></pre>

<p>```</p>

<p>Finally to start up the web process, run the following command:</p>

<p>``` sh</p>

<pre><code>foreman start
</code></pre>

<p>```</p>

<h2>Explanations</h2>

<p>As we discussed above, the thin is the web server and the mysql2 is the database adapter for rails.</p>

<p>We are going to use rails 3.1. The minor version might be updated for more functionality support or security issues. Rails 3.1 comes with Asset Pipeline which makes CSS and Javascript a first-class citizen in Rails. Those gems in the asset group are for the asset pipeline. And the jquery-rails gem is to use jQuery as the default Javascript library to be used in the project.</p>

<p>Finally, the foreman is a gem for managing Procfile-based applications. It automatically starts up the processes written in a Procfile in a certain format. Heroku supports Procfile and thus it is convenient to manage the processes required by the application with the help of Procfile.</p>
]]></content>
  </entry>
  
</feed>
